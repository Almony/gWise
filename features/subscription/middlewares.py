from features.subscription import manager
from core.logger import CustomLogger
from pyrogram.types import Message
from functools import wraps

logger = CustomLogger("SubscriptionMiddlewares")


def check_subscription(allowed_tiers: list[str] = None):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏.
    –ü—Ä–∏–º–µ—Ä: @check_subscription(["base", "pro"])
    """
    allowed_tiers = allowed_tiers or ["free", "base", "advanced", "pro"]

    def decorator(func):
        @wraps(func)
        async def wrapper(client, message: Message):
            user_id = message.from_user.id
            subscription = await manager.get_subscription(user_id)
            current_tier = subscription.get("type", "free")

            if current_tier not in allowed_tiers:
                await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
                logger.debug(f"–ü–æ–¥–ø–∏—Å–∫–∞ {current_tier} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –¥–ª—è {user_id}")
                return

            await func(client, message)
        return wrapper
    return decorator


def check_tokens(min_required_tokens: int = 50):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–¥ AI-–∑–∞–ø—Ä–æ—Å–æ–º.
    –ü—Ä–∏–º–µ—Ä: @check_tokens(100)
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(client, message: Message):
            user_id = message.from_user.id
            has_tokens = await manager.has_enough_tokens(
                user_id, required_tokens=min_required_tokens
            )

            if not has_tokens:
                await message.reply(
                    "üö´ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.\n–û–±–Ω–æ–≤–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI."
                )
                logger.debug(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return

            await func(client, message)
        return wrapper
    return decorator
