from core import on_message
from pyrogram import Client, filters
from pyrogram.types import Message

from features.subscription.middlewares import check_subscription
from features.channel.analyzer.analyzer import ChannelAnalyzer
from core.handlers.exception_handlers import handle_exceptions


@on_message(filters.command("analyzer_on"))
@handle_exceptions
@check_subscription
async def analyzer_on_handler(client: Client, message: Message):
    chat_id = message.chat.id
    analyzer = ChannelAnalyzer(chat_id, client)

    if not await analyzer.is_bot_admin():
        await message.reply_text("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    await analyzer.enable()
    await analyzer.bootstrap_collect_history()
    await message.reply_text("‚úÖ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∫–ª—é—á—ë–Ω. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã.")


@on_message(filters.command("analyzer_off"))
@handle_exceptions
@check_subscription
async def analyzer_off_handler(client: Client, message: Message):
    chat_id = message.chat.id
    analyzer = ChannelAnalyzer(chat_id, client)

    await analyzer.disable()
    await message.reply_text("üì¥ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")


@on_message(filters.command("analyzer_report"))
@handle_exceptions
@check_subscription
async def analyzer_report_handler(client: Client, message: Message):
    chat_id = message.chat.id
    analyzer = ChannelAnalyzer(chat_id, client)

    if not await analyzer.is_enabled():
        await message.reply_text("‚ÑπÔ∏è –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /analyzer_on –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return

    report = await analyzer.generate_report()
    # Placeholder ‚Äî –∑–¥–µ—Å—å –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
    await message.reply_text(f"üìä –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç:\n\n{report or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.'}")
