from pyrogram import Client, filters
from pyrogram.enums import ParseMode
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from core import on_message, on_callback_query, CustomLogger

logger = CustomLogger("HelpHandler")

def get_help_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ì—Ä—É–ø–ø—ã", callback_data="help_groups"),
            InlineKeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="help_reminders")
        ],
        [
            InlineKeyboardButton("–§–∏–Ω–∞–Ω—Å—ã", callback_data="help_finance"),
            InlineKeyboardButton("AI", callback_data="help_ai")
        ]
    ])

@on_message(filters.command("help"))
async def help_handler(client: Client, message: Message):
    await message.reply(
        "üÜò *–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:*",
        reply_markup=get_help_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /help")

@on_callback_query(filters.regex("^help_"))
async def help_callback_handler(client: Client, callback_query: CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id

    help_texts = {
        "help_groups": (
            "üë• *–ì—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã*\n\n"
            "–ü–∞–∫–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏:\n"
            "‚Äî –§–∏–ª—å—Ç—Ä—ã –æ—Ç —Å–ø–∞–º–∞ –∏ —Ñ–ª—É–¥–∞\n"
            "‚Äî –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚Äî –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "_–ü—Ä–∏–º–µ—Ä:_ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ —É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        ),
        "help_reminders": (
            "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n"
            "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∏ –±–æ—Ç —Å–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è.\n\n"
            "_–ü—Ä–∏–º–µ—Ä:_ `–Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É`"
        ),
        "help_finance": (
            "üí∞ *–§–∏–Ω–∞–Ω—Å—ã*\n\n"
            "–í–µ–¥–∏—Ç–µ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n"
            "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.\n\n"
            "_–ü—Ä–∏–º–µ—Ä:_ `/add 300 –µ–¥–∞ –ø–∏—Ü—Ü–∞`"
        ),
        "help_ai": (
            "ü§ñ *AI –ê–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–æ–≤, –≥—Ä—É–ø–ø, —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n"
            "–ü–æ–ª—É—á–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –æ–¥–Ω–æ –∫–∞—Å–∞–Ω–∏–µ.\n\n"
            "_–ü—Ä–∏–º–µ—Ä:_ `/ai-finance –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ñ–µ–≤—Ä–∞–ª—å`"
        ),
        "help_back": "üÜò *–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:*"
    }

    if data == "help_back":
        await callback_query.message.edit_text(
            help_texts["help_back"],
            reply_markup=get_help_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await callback_query.message.edit_text(
            help_texts.get(data, "–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help_back")]
            ]),
            parse_mode=ParseMode.MARKDOWN
        )

    await callback_query.answer()
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å –ø–æ —Ä–∞–∑–¥–µ–ª—É: {data}")
